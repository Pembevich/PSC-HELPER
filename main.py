import discord
from discord.ext import commands
import sqlite3
import os
import io
from PIL import Image
import moviepy.editor as mp
import uuid
import re
import asyncio
from discord import Embed, Color
from datetime import datetime
from moviepy.editor import VideoFileClip, ImageSequenceClip

allowed_role_ids = [1340596390614532127, 1341204231419461695]
allowed_guild_ids = [1340594372596469872]
sbor_channels = {}

intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect("bot_data.db")
c = conn.cursor()

c.execute('''
CREATE TABLE IF NOT EXISTS entries (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT,
    description TEXT
)
''')

c.execute('''
CREATE TABLE IF NOT EXISTS private_chats (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user1_id INTEGER,
    user2_id INTEGER,
    password TEXT
)
''')

c.execute('''
CREATE TABLE IF NOT EXISTS chat_messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    chat_id INTEGER,
    sender_id INTEGER,
    message TEXT,
    file BLOB,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
)
''')

conn.commit()

# --- –ö–æ–º–∞–Ω–¥–∞ !gif ---
@bot.command(name='gif')
async def gif(ctx):
    if not ctx.message.attachments:
        await ctx.send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ –∫ –∫–æ–º–∞–Ω–¥–µ.")
        return

    image_files = []
    video_files = []

    os.makedirs("temp", exist_ok=True)

    for attachment in ctx.message.attachments:
        filename = attachment.filename
        ext = os.path.splitext(filename)[1].lower().strip(".")

        unique_name = f"{uuid.uuid4().hex}.{ext}"
        file_path = os.path.join("temp", unique_name)
        await attachment.save(file_path)

        if ext in ['jpg', 'jpeg', 'png', 'webp', 'bmp', 'heic']:
            image_files.append(file_path)
        elif ext in ['mp4', 'mov', 'webm', 'avi', 'mkv']:
            video_files.append(file_path)
        else:
            await ctx.send(f"‚ùå –§–∞–π–ª `{filename}` –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            os.remove(file_path)
            return

    output_path = f"temp/{uuid.uuid4().hex}.gif"

    try:
        if image_files:
            clip = ImageSequenceClip(image_files, fps=1)
            clip.write_gif(output_path, fps=1)
        elif video_files:
            clip = VideoFileClip(video_files[0])
            clip = clip.subclip(0, min(5, clip.duration))
            clip.write_gif(output_path)
        else:
            await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è.")
            return

        await ctx.send(file=discord.File(output_path))

    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ GIF: {e}")

    finally:
        for f in image_files + video_files:
            if os.path.exists(f):
                os.remove(f)
        if os.path.exists(output_path):
            os.remove(output_path)

# --- /sbor ---
@bot.tree.command(name="sbor", description="–ù–∞—á–∞—Ç—å —Å–±–æ—Ä: —Å–æ–∑–¥–∞—ë—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –∏ –ø–∏–Ω–≥—É–µ—Ç —Ä–æ–ª—å")
@discord.app_commands.describe(role="–†–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–∏–Ω–≥–æ–≤–∞—Ç—å")
async def sbor(interaction: discord.Interaction, role: discord.Role):
    if interaction.guild.id not in allowed_guild_ids:
        await interaction.response.send_message("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
        return

    member = interaction.guild.get_member(interaction.user.id)
    if not member or not any(r.id in allowed_role_ids for r in member.roles):
        await interaction.response.send_message("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
        return

    await interaction.response.defer(ephemeral=True)

    existing = discord.utils.get(interaction.guild.voice_channels, name="—Å–±–æ—Ä")
    if existing:
        await interaction.followup.send("‚ùó –ö–∞–Ω–∞–ª '—Å–±–æ—Ä' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    overwrites = {
        interaction.guild.default_role: discord.PermissionOverwrite(connect=False),
        role: discord.PermissionOverwrite(connect=True, view_channel=True)
    }

    category = interaction.channel.category

    voice_channel = await interaction.guild.create_voice_channel(
        "–°–±–æ—Ä",
        overwrites=overwrites,
        category=category
    )

    sbor_channels[interaction.guild.id] = voice_channel.id

    webhook = await interaction.channel.create_webhook(name="–°–±–æ—Ä")
    await webhook.send(
        content=f"**–°–±–æ—Ä! {role.mention}. –ó–∞—Ö–æ–¥–∏—Ç–µ –≤ <#{voice_channel.id}>!**",
        username="–°–±–æ—Ä",
        avatar_url=bot.user.avatar.url if bot.user.avatar else None
    )
    await webhook.delete()

    await interaction.followup.send("‚úÖ –°–±–æ—Ä —Å–æ–∑–¥–∞–Ω!")

# --- /sbor_end ---
@bot.tree.command(name="sbor_end", description="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä –∏ —É–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª")
async def sbor_end(interaction: discord.Interaction):
    if interaction.guild.id not in allowed_guild_ids:
        await interaction.response.send_message("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
        return

    member = interaction.guild.get_member(interaction.user.id)
    if not member or not any(r.id in allowed_role_ids for r in member.roles):
        await interaction.response.send_message("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
        return

    await interaction.response.defer(ephemeral=True)

    channel_id = sbor_channels.get(interaction.guild.id)
    if not channel_id:
        await interaction.followup.send("‚ùó –ö–∞–Ω–∞–ª '—Å–±–æ—Ä' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    channel = interaction.guild.get_channel(channel_id)
    if channel:
        await channel.delete()

    webhook = await interaction.channel.create_webhook(name="–°–±–æ—Ä")
    await webhook.send(
        content="*–°–±–æ—Ä –æ–∫–æ–Ω—á–µ–Ω!*",
        username="–°–±–æ—Ä",
        avatar_url=bot.user.avatar.url if bot.user.avatar else None
    )
    await webhook.delete()

    sbor_channels.pop(interaction.guild.id, None)
    await interaction.followup.send("‚úÖ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω.")

# --- on_ready ---
@bot.event
async def on_ready():
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")
    for guild_id in allowed_guild_ids:
        try:
            guild = discord.Object(id=guild_id)
            await bot.tree.sync(guild=guild)
            print(f"‚úÖ –ö–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º {guild_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–∞ –∏ –±–∞–Ω ---
target_channel_id = 1349726325052538900

async def send_error_embed(channel, author, error_text, example_template):
    now = datetime.now().strftime("%d.%m.%Y %H:%M:%S –ú–°–ö")

    embed = Embed(
        title="‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞",
        description=error_text,
        color=Color.red()
    )
    embed.add_field(name="üìù –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ", value=f"```{example_template}```", inline=False)
    embed.set_footer(text=f"–í—ã–∑–≤–∞–ª: {author.name} | ID: {author.id} | {now}")

    await channel.send(embed=embed)

@bot.event
async def on_message(message):
    if message.author.bot:
        return

    if message.channel.id == target_channel_id:
        template = (
            "–ù–∏–∫–Ω–µ–π–º: Vanya1234\n"
            "–î—Å –∞–π–¥–∏: 123456789012345678\n"
            "–í—Ä–µ–º—è: 1h 30min\n"
            "–ü—Ä–∏—á–∏–Ω–∞: –ø—Ä–∏—á–∏–Ω–∞ –≤—ã–¥–∞—á–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞\n"
            "–î–æ–∫-–≤–∞: –°–∫—Ä–∏–Ω/—Å—Å—ã–ª–∫–∞ (–≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å–æ–≤–∞—Ç—å)"
        )

        lines = [line.strip() for line in message.content.strip().split("\n") if line.strip()]
        if len(lines) != 5:
            await send_error_embed(message.channel, message.author, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫.", template)
            await bot.process_commands(message)
            return

        nickname_line, id_line, time_line, reason_line, evidence_line = lines

        if not nickname_line.lower().startswith("–Ω–∏–∫–Ω–µ–π–º:") \
            or not id_line.lower().startswith("–¥—Å –∞–π–¥–∏:") \
            or not time_line.lower().startswith("–≤—Ä–µ–º—è:") \
            or not reason_line.lower().startswith("–ø—Ä–∏—á–∏–Ω–∞:") \
            or not evidence_line.lower().startswith("–¥–æ–∫-–≤–∞:"):
            await send_error_embed(message.channel, message.author, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω.", template)
            await bot.process_commands(message)
            return

        try:
            user_id = int(id_line.split(":", 1)[1].strip())
        except ValueError:
            await send_error_embed(message.channel, message.author, "`–î—Å –∞–π–¥–∏` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", template)
            await bot.process_commands(message)
            return

        time_text = time_line.split(":", 1)[1].strip().lower()
        reason = reason_line.split(":", 1)[1].strip()

        if time_text == "perm":
            total_seconds = None
        else:
            h_match = re.search(r"(\d+)\s*h", time_text)
            m_match = re.search(r"(\d+)\s*min", time_text)

            total_seconds = 0
            if h_match:
                total_seconds += int(h_match.group(1)) * 3600
            if m_match:
                total_seconds += int(m_match.group(1)) * 60

            if total_seconds == 0:
                await send_error_embed(message.channel, message.author, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –£–∫–∞–∂–∏ `Perm` –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–∞ `1h 30min`.", template)
                await bot.process_commands(message)
                return

        try:
            await message.guild.ban(discord.Object(id=user_id), reason=reason)
            await message.add_reaction("‚úÖ")

            if total_seconds:
                async def unban_later():
                    await asyncio.sleep(total_seconds)
                    await message.guild.unban(discord.Object(id=user_id), reason="–í—Ä–µ–º—è –±–∞–Ω–∞ –∏—Å—Ç–µ–∫–ª–æ")

                bot.loop.create_task(unban_later())

        except Exception as e:
            await send_error_embed(message.channel, message.author, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", template)

    await bot.process_commands(message)

bot.run(os.getenv("DISCORD_TOKEN"))